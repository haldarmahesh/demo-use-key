{"version":3,"sources":["use-key/index.js","App.js","serviceWorker.js","index.js"],"names":["component","_useState","useState","_useState2","Object","slicedToArray","key1","setKey1","_useState3","_useState4","key2","setKey2","_useState5","_useState6","key3","setKey3","useKey","key","detectKeys","react_default","a","createElement","Fragment","className","main_default","gist","role","App","use_key","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAgFeA,EA5EG,WAAM,IAAAC,EACEC,mBAAS,GADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfK,EADeH,EAAA,GACTI,EADSJ,EAAA,GAAAK,EAEEN,mBAAS,GAFXO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEfE,EAFeD,EAAA,GAETE,EAFSF,EAAA,GAAAG,EAGEV,mBAAS,GAHXW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGfE,EAHeD,EAAA,GAGTE,EAHSF,EAAA,GAoBtB,OAfAG,IAAO,WACLT,EAAQ,SAAAU,GAAG,OAAIA,EAAM,KACpB,CACDC,WAAY,CAAC,OAEfF,IAAO,WACLL,EAAQ,SAAAM,GAAG,OAAIA,EAAM,KACpB,CACDC,WAAY,CAAC,MAEfF,IAAO,WACLD,EAAQ,SAAAE,GAAG,OAAIA,EAAM,KACpB,CACDC,WAAY,CAAC,MAGTC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UACG,IADH,QAGEF,EAAAC,EAAAC,cAAA,kBAHF,IAKEF,EAAAC,EAAAC,cAAA,mBACC,IANH,KAQEF,EAAAC,EAAAC,cAAA,kBAIFF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,IACZJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,IAAhB,SACC,IACDJ,EAAAC,EAAAC,cAAA,YAAOf,GACN,IAJH,SAOAa,EAAAC,EAAAC,cAAA,mBAEG,IACAX,EAHH,SAMAS,EAAAC,EAAAC,cAAA,MAAIE,UAAU,KACZJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,IAAhB,UACC,IACDJ,EAAAC,EAAAC,cAAA,YAAOP,GACN,IAJH,SAQAK,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAgBK,KAAK,oDAGzBN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAsBG,KAAK,SACxCP,EAAAC,EAAAC,cAAA,4CAMRF,EAAAC,EAAAC,cAAA,8FClDKM,mLAlBX,OACER,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,oBAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAd,yBAGJJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,eACdJ,EAAAC,EAAAC,cAACO,EAAD,OAEFT,EAAAC,EAAAC,cAAA,UAAQE,UAAU,oBAChBJ,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,+CAA+CC,OAAO,SAASC,IAAI,uBAA3E,mBAbQC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.3e656606.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport useKey from 'use-key-hook';\nimport ReactEmbedGist from 'react-embed-gist';\n\nconst component = () => {\n  const [key1, setKey1] = useState(0);\n  const [key2, setKey2] = useState(0);\n  const [key3, setKey3] = useState(0);\n\n  useKey(() => {\n    setKey1(key => key + 1);\n  }, {\n    detectKeys: ['g'],\n  });\n  useKey(() => {\n    setKey2(key => key + 1);\n  }, {\n    detectKeys: [27],\n  });\n  useKey(() => {\n    setKey3(key => key + 1);\n  }, {\n    detectKeys: [53],\n  });\n  return (\n        <>\n          <h1>\n            {' '}\n                Press\n            <kbd> g </kbd>\n                ,\n            <kbd> Esc</kbd>\n            {' '}\n                or\n            <kbd> 5</kbd>\n          </h1>\n\n          {/* <h2 className=\"cover-heading\">to trigger the Hook.</h2> */}\n          <h3 className=\"\">\n            <span className=\"\">g -&gt; </span>\n            {' '}\n            <span>{key1}</span>\n            {' '}\n                times\n          </h3>\n          <h3>\n                Esc -&gt;\n            {' '}\n            {key2}\n                times\n          </h3>\n          <h3 className=\" \">\n            <span className=\"\"> 5 -&gt; </span>\n            {' '}\n            <span>{key3}</span>\n            {' '}\n                times\n          </h3>\n          {/* <Gist id='00bde27b269326ab4020acb52d1a541b' file='Chef-Dockerfile' /> */}\n          <div className=\"container\">\n            <div className=\"row justify-content-md-center\">\n              <div className=\"col-md-8 col-lg-6\">\n                <ReactEmbedGist gist=\"haldarmahesh/78c1ebcfc5250a58b0711257e75897a7\" />\n              </div>\n            </div>\n            <div className=\"row justify-content-md-center\">\n              <div className=\"col-md-9 col-lg-8\">\n                <div className=\"alert alert-success\" role=\"alert\">\n                  <code>npm install use-key-hook</code>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <p>\n                In this example, we are tracking only 3 keys. You can track any number of keys.\n          </p>\n        </>\n  );\n};\nexport default component;\n","import React, { Component } from 'react';\nimport './App.css';\nimport UseKeyComponent from './use-key/index';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <header className=\"masthead mb-auto\">\n          <div className=\"inner\">\n            <h3 className=\"masthead-brand\">useKey - React hook</h3>\n          </div>\n        </header>\n        <main className=\"inner cover\">\n          <UseKeyComponent />\n        </main>\n        <footer className=\"mastfoot mt-auto\">\n          <a href=\"https://github.com/haldarmahesh/use-key-hook\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}